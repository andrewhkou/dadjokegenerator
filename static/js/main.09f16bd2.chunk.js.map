{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","joke","joke_list","index","prevJoke","bind","assertThisInitialized","nextJoke","getNewJoke","console","log","fetch","headers","Accept","response","json","setState","concat","id","response2","json2","response3","json3","getPrevJoke","length","getNextJoke","react_default","a","createElement","className","src","alt","height","type","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4RAuHeA,qBAlHb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACXC,KAAM,GACNC,UAAW,GACXC,OAAQ,GAEVV,EAAKW,SAAWX,EAAKW,SAASC,KAAdX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KAChBA,EAAKc,SAAWd,EAAKc,SAASF,KAAdX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KARJA,2LAYZG,KAAKY,2QAILC,QAAQC,IAAI,qBACWC,MAAK,8BAAgC,CAC1DC,QAAS,CACPC,OAAQ,oCAFNC,kBAKaA,EAASC,cAAtBA,SACNN,QAAQC,IAAId,KAAKI,MAAMG,OACvBP,KAAKoB,SAAS,CACZf,KAAMc,EAAKd,KACXC,UAAWN,KAAKI,MAAME,UAAUe,OAAO,CAACF,EAAKG,KAC7Cf,MAAOP,KAAKI,MAAMG,MAAM,IAEzBM,QAAQC,IAAId,KAAKI,MAAMG,OACvBM,QAAQC,IAAId,KAAKI,MAAME,2QAIxBO,QAAQC,IAAI,uBACZD,QAAQC,IAAId,KAAKI,MAAME,UAAUN,KAAKI,MAAMG,MAAM,aAC1BQ,MAAM,gCAAkCf,KAAKI,MAAME,UAAUN,KAAKI,MAAMG,MAAM,GAAI,CACxGS,QAAS,CACPC,OAAQ,oCAFNM,kBAKcA,EAAUJ,cAAxBK,SACNxB,KAAKoB,SAAS,CACZf,KAAMmB,EAAMnB,KACZE,MAAOP,KAAKI,MAAMG,MAAM,4QAKFQ,MAAM,gCAAkCf,KAAKI,MAAME,UAAUN,KAAKI,MAAMG,MAAM,GAAI,CACxGS,QAAS,CACPC,OAAQ,oCAFNQ,kBAKcA,EAAUN,cAAxBO,SACN1B,KAAKoB,SAAS,CACZf,KAAMqB,EAAMrB,KACZE,MAAOP,KAAKI,MAAMG,MAAM,yIAM1BM,QAAQC,IAAI,WAEZD,QAAQC,IAAId,KAAKI,MAAMG,OAClBP,KAAKI,MAAMG,MAAQ,GACtBP,KAAK2B,iDAMPd,QAAQC,IAAId,KAAKI,MAAME,WACvBO,QAAQC,IAAId,KAAKI,MAAMG,OAClBP,KAAKI,MAAMG,MAAM,IAAMP,KAAKI,MAAME,UAAUsB,OAC/C5B,KAAKY,aAELZ,KAAK6B,+CAKP,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACfH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,+KAA+KD,UAAU,OAAOE,IAAI,aAAaC,OAAO,QAC/NN,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAAlB,yBAIAH,EAAAC,EAAAC,cAAA,OAAKC,UAAY,QACdjC,KAAKI,MAAMC,MAEdyB,EAAAC,EAAAC,cAAA,OAAKC,UAAY,UACfH,EAAAC,EAAAC,cAAA,UACMC,UAAU,OACVI,KAAK,SACLC,QAAStC,KAAKQ,UAHpB,QAOAsB,EAAAC,EAAAC,cAAA,UACMC,UAAU,OACVI,KAAK,SACLC,QAAStC,KAAKW,UAHpB,iBAvGQ4B,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhB,EAAAC,EAAAC,cAACe,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.09f16bd2.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = { \n      joke: \"\",\n      joke_list: [],\n      index: -1\n    };\n    this.prevJoke = this.prevJoke.bind(this);\n    this.nextJoke = this.nextJoke.bind(this);\n  }\n\n  async componentDidMount() {\n    this.getNewJoke();\n  }\n\n  async getNewJoke() {\n    console.log(\"new joke\");\n    const response = await fetch(`https://icanhazdadjoke.com/`, {\n      headers: {\n        Accept: 'application/json'\n      }\n    });\n    const json = await response.json();\n    console.log(this.state.index);\n    this.setState({ \n      joke: json.joke,\n      joke_list: this.state.joke_list.concat([json.id]),\n      index: this.state.index+1\n     });\n     console.log(this.state.index);\n     console.log(this.state.joke_list);\n  }\n\n  async getPrevJoke() {\n    console.log(\"entered getjokebyid\");\n    console.log(this.state.joke_list[this.state.index-1]);\n    const response2 = await fetch(\"https://icanhazdadjoke.com/j/\" + this.state.joke_list[this.state.index-1], {\n      headers: {\n        Accept: 'application/json'\n      }\n    });\n    const json2 = await response2.json();\n    this.setState({\n      joke: json2.joke,\n      index: this.state.index-1\n    });\n  }\n\n  async getNextJoke() {\n    const response3 = await fetch(\"https://icanhazdadjoke.com/j/\" + this.state.joke_list[this.state.index+1], {\n      headers: {\n        Accept: 'application/json'\n      }\n    });\n    const json3 = await response3.json();\n    this.setState({\n      joke: json3.joke,\n      index: this.state.index+1\n    });\n  }\n\n\n  prevJoke(){\n    console.log(\"entered\");\n\n    console.log(this.state.index);\n    if ((this.state.index > 0)) {\n      this.getPrevJoke();\n      }\n    }\n\n  nextJoke() {\n\n    console.log(this.state.joke_list);\n    console.log(this.state.index);\n    if ((this.state.index+1 === this.state.joke_list.length)) {\n      this.getNewJoke();\n    } else {\n      this.getNextJoke();\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"generator\">\n      <div className=\"header\">\n      <img src=\"https://scontent-sjc3-1.xx.fbcdn.net/v/t31.0-8/339217_244815522248767_1884044519_o.jpg?_nc_cat=102&_nc_ht=scontent-sjc3-1.xx&oh=0d30a0fa0a038a678db58edbfabf9c7d&oe=5D117D9D\" className=\"LMAO\" alt=\"LMFAOOOOOO\" height=\"150\"/>\n        <header className=\"joke-title\">\n          julia joke generator\n        </header>\n      </div>\n        <div className = \"joke\">\n          {this.state.joke}\n        </div>\n        <div className = \"clicky\">\n          <button\n                className=\"prev\"\n                type=\"button\"\n                onClick={this.prevJoke}\n              >\n                prev\n          </button>\n          <button\n                className=\"next\"\n                type=\"button\"\n                onClick={this.nextJoke}\n              >\n                next\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}